# CI/CD Pipeline for the API Gateway
name: CI - API Gateway

on:
  push:
    branches: [ "main" ]
    paths:
      - 'api-gateway/**'
      - '.github/workflows/api-gateway-ci.yml'
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./api-gateway

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Install Dependencies
        run: npm install
      # - name: Run Tests
      #   run: npm test
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push to Docker Hub
        uses: docker/build-push-action@v5
        with:
          context: ./api-gateway
          file: ./api-gateway/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/api-gateway:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/api-gateway:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to AWS EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_SERVER_HOST }}
          username: ${{ secrets.PROD_SERVER_USERNAME }}
          key: ${{ secrets.PROD_SERVER_SSH_KEY }}
          script: |
            export PROJ_DIR=/home/ubuntu/studyonic
            
            mkdir -p $PROJ_DIR
            cd $PROJ_DIR

            if [ ! -d ".git" ]; then
              git clone https://github.com/${{ github.repository }}.git .
            else
              git reset --hard
              git pull origin main
            fi

            echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
            
            docker-compose pull
            
            docker-compose up -d --remove-orphans
            
            docker image prune -af