services:
  # INFRASTRUCTURE SERVICES
  
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    hostname: zookeeper
    networks: [edtech-network]
    ports: ["2181:2181"]
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    hostname: kafka
    depends_on: [zookeeper]
    networks: [edtech-network]
    ports: ["9092:9092", "29092:29092"]
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 3000
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: redis
    hostname: redis
    networks: [edtech-network]
    ports: ["6379:6379"]
    command: redis-server --save 60 1 --loglevel warning
    volumes:
      - redis-data:/data
    # healthcheck:
    #   test: ["CMD", "redis-cli", "ping"]
    #   interval: 5s
    restart: unless-stopped

  # APPLICATION SERVICES
  
  api-gateway:
    image: ${DOCKER_USERNAME}/api-gateway:latest
    # build: ./api-gateway
    container_name: api-gateway
    hostname: api-gateway
    depends_on: [user-service, course-service, payment-service, notification-service]
    networks: [edtech-network]
    ports: ["8000:8000"]
    env_file: [".env.prod"]
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  user-service:
    image: ${DOCKER_USERNAME}/user-service:latest
    # build: ./user-service
    container_name: user-service
    hostname: user-service
    depends_on: [kafka, redis]
    networks: [edtech-network]
    env_file: [".env.prod"]
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    
  course-service:
    image: ${DOCKER_USERNAME}/course-service:latest
    # build: ./course-service
    container_name: course-service
    hostname: course-service
    depends_on: [kafka, redis]
    networks: [edtech-network]
    env_file: [".env.prod"]
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      
  payment-service:
    image: ${DOCKER_USERNAME}/payment-service:latest
    # build: ./payment-service
    container_name: payment-service
    hostname: payment-service
    depends_on: [kafka]
    networks: [edtech-network]
    env_file: [".env.prod"]
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      
  notification-service:
    image: ${DOCKER_USERNAME}/notification-service:latest
    # build: ./notification-service
    container_name: notification-service
    hostname: notification-service
    depends_on: [kafka]
    networks: [edtech-network]
    env_file: [".env.prod"]
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    image: ${DOCKER_USERNAME}/frontend:latest
    # build: ./studyonic-frontend
    container_name: frontend
    hostname: frontend
    depends_on:
      api-gateway:
        condition: service_healthy
    networks: [edtech-network]
    ports:
      - "80:80"
    restart: always

# --- NETWORKS & VOLUMES ---
networks:
  edtech-network:
    driver: bridge

volumes:
  kafka-data:
  zookeeper-data:
  zookeeper-logs:
  redis-data: