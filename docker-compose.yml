services:

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    hostname: zookeeper
    networks:
      - edtech-network
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVER_ID: 1
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    hostname: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - edtech-network
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 3000
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_MIN_IN_SYNC_REPLICAS: 1
      # JVM Settings
      KAFKA_HEAP_OPTS: "-Xmx1G -Xms1G"
      KAFKA_JVM_PERFORMANCE_OPTS: "-server -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -XX:+ExplicitGCInvokesConcurrent -Djava.awt.headless=true"
    volumes:
      - kafka-data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:29092"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1.5G
        reservations:
          memory: 1G

  redis:
    image: redis:7-alpine
    container_name: redis
    hostname: redis
    networks:
      - edtech-network
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # APPLICATION SERVICES

  user-service:
    build: 
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user-service
    hostname: user-service
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - edtech-network
    ports:
      - "8001:8001"
    environment:
      - NODE_ENV=production
      - KAFKA_BROKERS=kafka:29092
      - REDIS_URL=redis://redis:6379
    env_file:
      - ./user-service/.env
    volumes:
      - ./user-service/logs:/usr/src/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    dns:
      - 8.8.8.8
      - 8.8.4.4

  course-service:
    build: 
      context: ./course-service
      dockerfile: Dockerfile
    container_name: course-service
    hostname: course-service
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - edtech-network
    ports:
      - "8002:8002"
    environment:
      - NODE_ENV=production
      - KAFKA_BROKERS=kafka:29092
      - REDIS_URL=redis://redis:6379
    env_file:
      - ./course-service/.env
    volumes:
      - ./course-service/logs:/usr/src/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    dns:
      - 8.8.8.8
      - 8.8.4.4

  payment-service:
    build: 
      context: ./payment-service
      dockerfile: Dockerfile
    container_name: payment-service
    hostname: payment-service
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - edtech-network
    ports:
      - "8003:8003"
    environment:
      - NODE_ENV=production
      - KAFKA_BROKERS=kafka:29092
    env_file:
      - ./payment-service/.env
    volumes:
      - ./payment-service/logs:/usr/src/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    dns:
      - 8.8.8.8
      - 8.8.4.4

  notification-service:
    build: 
      context: ./notification-service
      dockerfile: Dockerfile
    container_name: notification-service
    hostname: notification-service
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - edtech-network
    ports:
      - "8004:8004"
    environment:
      - NODE_ENV=production
      - KAFKA_BROKERS=kafka:29092
    env_file:
      - ./notification-service/.env
    volumes:
      - ./notification-service/logs:/usr/src/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    dns:
      - 8.8.8.8
      - 8.8.4.4

  api-gateway:
    build: 
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    hostname: api-gateway
    depends_on:
      user-service:
        condition: service_healthy
      course-service:
        condition: service_healthy
      payment-service:
        condition: service_healthy
      notification-service:
        condition: service_healthy
    networks:
      - edtech-network
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=production
      - USER_SERVICE_URL=http://user-service:8001
      - COURSE_SERVICE_URL=http://course-service:8002
      - PAYMENT_SERVICE_URL=http://payment-service:8003
      - NOTIFICATION_SERVICE_URL=http://notification-service:8004
    env_file:
      - ./api-gateway/.env
    volumes:
      - ./api-gateway/logs:/usr/src/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    dns:
      - 8.8.8.8
      - 8.8.4.4

# NETWORKS & VOLUMES
networks:
  edtech-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  kafka-data:
    driver: local
  zookeeper-data:
    driver: local
  zookeeper-logs:
    driver: local
  redis-data:
    driver: local